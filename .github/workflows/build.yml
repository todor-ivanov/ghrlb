name: Build
env:
  tag_regex_st: '^v?[0-9]+\.[0-9]+\.[0-9]+$'
  tag_regex_rc: '^v?[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$'
on:
  push:
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+'
      - 'v?[0-9]+.[0-9]+.[0-9]+rc[0-9]+'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Get the Ref
      id: get-ref
      uses: ankitvgupta/ref-to-tag-action@master
      with:
        ref: ${{ github.ref }}
        head_ref: ${{ github.head_ref }}

    - name: Set Stable Flag
      id: is-stable
      run: |
        if [[ ${{ steps.get-ref.outputs.tag }} =~ ${{ env.tag_regex_st }} ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
            echo "Build triggered on stable release"
        else
            echo "match=false" >> $GITHUB_OUTPUT
        fi

    - name: Set RC Flag
      id: is-rc
      run: |
        if [[ ${{ steps.get-ref.outputs.tag }} =~ ${{ env.tag_regex_rc }} ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
            echo "Build triggered on stable release"
        else
            echo "match=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build
      run: |
        ${{ steps.is-rc.outputs.match }} && echo "Building a release candidate ..." || true
        ${{ steps.is-stable.outputs.match }} && echo "Building a stable release ..." || true

    - name: Create Release
      id: create_release
      if: steps.is-stable.outputs.match == 'true'
      # uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
      run: |
        echo "upload_url=url-from-create-release" >> $GITHUB_OUTPUT


    - name: Create PreRelease
      id: create_prerelease
      if: steps.is-rc.outputs.match == 'true'
      # uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true
      run: |
        echo "upload_url=url-from-create-prerelease" >> $GITHUB_OUTPUT

    - name: Upload binaries
      id: upload-das2go
      # uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ fromJSON(steps.is-stable.outputs.match) && steps.create_release.outputs.upload_url || steps.create_prerelease.outputs.upload_url }}
        asset_path: ./das2go
        asset_name: das2go
        asset_content_type: application/octet-stream
    run: |
        echo "upload_url: ${{ upload_url }}
